/* The following code was generated by JFlex 1.4.3 on 27/08/12 18:33 */

package com.github.kumaraman21.intellijbehave.highlighter;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27/08/12 18:33 from the specification file
 * <tt>Story.flex</tt>
 */
class _StoryLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_SCENARIO = 6;
  public static final int IN_STORY = 4;
  public static final int YYINITIAL = 0;
  public static final int IN_TABLE = 12;
  public static final int IN_DIRECTIVE = 2;
  public static final int IN_STEP = 8;
  public static final int IN_META = 10;
  public static final int IN_EXAMPLES = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\17\1\36\13\0"+
    "\1\37\14\0\1\16\5\0\1\5\1\34\3\0\1\22\1\0\1\30"+
    "\5\0\1\20\5\0\1\6\1\32\2\0\1\32\11\0\1\12\1\0"+
    "\1\7\1\35\1\10\2\0\1\33\1\14\2\0\1\26\1\24\1\11"+
    "\1\15\1\25\1\0\1\13\1\27\1\21\1\0\1\31\1\0\1\23"+
    "\3\0\1\4\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\10\1\1\3\1\4\1\5\7\3"+
    "\2\4\1\6\1\7\1\10\1\11\1\12\2\13\1\14"+
    "\1\4\1\15\7\1\7\0\1\15\7\0\5\1\5\0"+
    "\1\16\7\0\3\1\3\0\1\17\5\0\2\1\1\0"+
    "\1\20\4\0\2\1\4\0\2\1\4\0\1\1\5\0"+
    "\1\21\1\0\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\240\0\300\0\340"+
    "\0\u0100\0\u0120\0\u0140\0\u0160\0\u0180\0\u01a0\0\u01c0\0\u01e0"+
    "\0\u0200\0\u0220\0\u0240\0\u0140\0\u0260\0\u0140\0\u0280\0\u02a0"+
    "\0\u02c0\0\u02e0\0\u0300\0\u0320\0\u0340\0\u0360\0\u0380\0\u03a0"+
    "\0\u03c0\0\u03e0\0\u0400\0\u0420\0\u0440\0\u0140\0\u0140\0\u0140"+
    "\0\u0160\0\u0460\0\u0480\0\u04a0\0\u04c0\0\u04e0\0\u0500\0\u0520"+
    "\0\u0540\0\u0560\0\u0580\0\u05a0\0\u05c0\0\u05e0\0\u0600\0\u0140"+
    "\0\u0620\0\u0640\0\u0660\0\u0680\0\u06a0\0\u06c0\0\u06e0\0\u0700"+
    "\0\u0720\0\u0740\0\u0760\0\u0780\0\u07a0\0\u07c0\0\u07e0\0\u0800"+
    "\0\u0820\0\u0840\0\u0860\0\u0880\0\u08a0\0\u08c0\0\u08e0\0\u0900"+
    "\0\u0920\0\u0940\0\u0960\0\u0980\0\u09a0\0\u09c0\0\u09e0\0\u0140"+
    "\0\u0a00\0\u0a20\0\u0a40\0\u0a60\0\u0a80\0\u0aa0\0\u0ac0\0\u0ae0"+
    "\0\u0140\0\u0b00\0\u0b20\0\u0b40\0\u0b60\0\u0b80\0\u0ba0\0\u0bc0"+
    "\0\u0be0\0\u0c00\0\u0c20\0\u0c40\0\u0c60\0\u0c80\0\u0ca0\0\u0cc0"+
    "\0\u0ce0\0\u0d00\0\u0d20\0\u0d40\0\u0d60\0\u0d80\0\u0da0\0\u0140"+
    "\0\u0dc0\0\u0140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\11\1\14\1\11\1\15\11\11"+
    "\1\16\1\11\1\17\5\11\1\20\1\11\1\21\1\11"+
    "\1\22\1\11\1\23\1\11\1\24\3\25\1\26\1\24"+
    "\1\27\10\24\1\25\1\30\1\24\1\31\5\24\1\32"+
    "\1\24\1\33\1\24\1\34\1\24\1\35\1\24\1\11"+
    "\1\36\1\37\35\11\1\40\1\36\1\37\35\40\1\41"+
    "\1\36\1\37\35\41\1\42\1\36\1\37\2\42\1\43"+
    "\32\42\1\44\1\45\1\46\1\44\1\47\33\44\1\24"+
    "\1\36\1\37\1\50\13\24\1\50\20\24\1\11\2\0"+
    "\35\11\2\0\1\13\75\0\1\51\2\0\35\51\1\11"+
    "\2\0\4\11\1\52\31\11\2\0\5\11\1\53\30\11"+
    "\2\0\20\11\1\54\15\11\2\0\11\11\1\55\24\11"+
    "\2\0\30\11\1\56\5\11\2\0\6\11\1\57\27\11"+
    "\2\0\34\11\1\60\1\0\3\25\13\0\1\25\27\0"+
    "\1\61\40\0\1\62\52\0\1\63\30\0\1\64\56\0"+
    "\1\65\15\0\1\66\65\0\1\67\2\0\1\37\1\0"+
    "\1\70\1\0\1\71\11\0\1\72\1\0\1\73\5\0"+
    "\1\74\1\0\1\75\1\0\1\76\1\0\1\77\5\0"+
    "\1\70\1\0\1\71\11\0\1\72\1\0\1\73\5\0"+
    "\1\74\1\0\1\75\1\0\1\76\1\0\1\77\1\0"+
    "\1\40\2\0\35\40\1\41\2\0\35\41\1\42\2\0"+
    "\2\42\1\0\32\42\1\43\3\0\13\43\1\0\20\43"+
    "\1\44\2\0\1\44\1\0\33\44\2\0\1\46\35\0"+
    "\1\11\2\0\5\11\1\100\30\11\2\0\16\11\1\101"+
    "\17\11\2\0\7\11\1\102\26\11\2\0\26\11\1\56"+
    "\7\11\2\0\5\11\1\103\30\11\2\0\32\11\1\104"+
    "\3\11\2\0\34\11\1\14\10\0\1\105\50\0\1\106"+
    "\30\0\1\107\56\0\1\65\16\0\1\110\64\0\1\111"+
    "\41\0\1\112\7\0\1\113\40\0\1\114\52\0\1\115"+
    "\30\0\1\116\56\0\1\117\15\0\1\120\65\0\1\121"+
    "\1\11\2\0\6\11\1\122\27\11\2\0\7\11\1\123"+
    "\26\11\2\0\21\11\1\124\14\11\2\0\6\11\1\104"+
    "\27\11\2\0\14\11\1\14\20\11\11\0\1\125\40\0"+
    "\1\126\51\0\1\127\24\0\1\111\45\0\1\130\20\0"+
    "\1\112\2\0\35\112\10\0\1\131\50\0\1\132\30\0"+
    "\1\133\56\0\1\117\16\0\1\134\64\0\1\135\41\0"+
    "\1\70\1\11\2\0\7\11\1\136\26\11\2\0\13\11"+
    "\1\14\22\11\2\0\22\11\1\137\12\11\12\0\1\140"+
    "\43\0\1\141\46\0\1\142\23\0\1\143\40\0\1\144"+
    "\51\0\1\145\24\0\1\135\45\0\1\70\20\0\1\11"+
    "\2\0\10\11\1\146\25\11\2\0\23\11\1\147\11\11"+
    "\13\0\1\150\52\0\1\151\23\0\1\152\43\0\1\70"+
    "\46\0\1\153\12\0\1\11\2\0\11\11\1\154\24\11"+
    "\2\0\5\11\1\155\27\11\14\0\1\156\33\0\1\157"+
    "\42\0\1\160\52\0\1\161\11\0\1\11\2\0\12\11"+
    "\1\162\23\11\2\0\24\11\1\123\10\11\15\0\1\163"+
    "\51\0\1\164\24\0\1\165\33\0\1\166\27\0\1\11"+
    "\2\0\13\11\1\104\21\11\16\0\1\167\37\0\1\170"+
    "\36\0\1\171\51\0\1\144\27\0\1\172\36\0\1\135"+
    "\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3552];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\1\1\11\10\1\1\11\1\1\1\11\17\1"+
    "\3\11\10\1\7\0\1\11\7\0\5\1\5\0\1\1"+
    "\7\0\3\1\3\0\1\11\5\0\2\1\1\0\1\11"+
    "\4\0\2\1\4\0\2\1\4\0\1\1\5\0\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> yystates = new Stack<Integer> () {{ push(YYINITIAL); }};
    public boolean trace = false;

    public void yystatePush(int yystate) {
        if(trace) System.out.println(">>>> PUSH: " + LexicalState.fromLexer(yystate) + " [" + reverseAndMap(yystates) + "]");
        yybegin(yystate);
        yystates.push(yystate);
    }

    private String reverseAndMap(Stack<Integer> yystates) {
        StringBuilder builder = new StringBuilder();
        for(int i=yystates.size()-1; i>=0; i--) {
            if(builder.length()>0)
                builder.append(", ");
            builder.append(LexicalState.fromLexer(yystates.get(i)));
        }
        return builder.toString();
    }

    public void yystatePopNPush(int yystate) {
        yystatePopNPush(1, yystate);
    }

    public void yystatePopNPush(int nb, int yystate) {
        if(trace) System.out.println(">>>> POP'n PUSH : #" + nb + ", " + LexicalState.fromLexer(yystate) + " [" + reverseAndMap(yystates) + "]");
        for (int i = 0; i < nb; i++) {
            yystatePop();
        }
        yystatePush(yystate);
    }

    public int yystatePop() {
        int popped = yystates.pop();
        if(trace) System.out.println(">>>> POP : " + LexicalState.fromLexer(popped) + " [" + reverseAndMap(yystates) + "]");
        if(!yystates.isEmpty()) {
            yybegin(yystates.peek());
        }// otherwise hopes a push will follow right after
        return popped;
    }

    public boolean checkAhead(char c) {
        if (zzMarkedPos >= zzBuffer.length())
            return false;
        return zzBuffer.charAt(zzMarkedPos) == c;
    }


  _StoryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _StoryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 106) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { return StoryTokenType.TABLE_CELL;
          }
        case 19: break;
        case 15: 
          { yystatePopNPush(2, IN_STEP);     return StoryTokenType.STEP_TYPE;
          }
        case 20: break;
        case 14: 
          { yystatePop();                    return StoryTokenType.COMMENT;
          }
        case 21: break;
        case 9: 
          { return StoryTokenType.META_KEY;
          }
        case 22: break;
        case 2: 
          { yystatePush(IN_STORY); yypushback(yytext().length());
          }
        case 23: break;
        case 7: 
          { return StoryTokenType.STEP_TEXT;
          }
        case 24: break;
        case 11: 
          { yystatePop(); yypushback(1);
          }
        case 25: break;
        case 5: 
          { yystatePopNPush(1, IN_TABLE);    return StoryTokenType.TABLE_DELIM;
          }
        case 26: break;
        case 13: 
          { yystatePush(IN_DIRECTIVE); yypushback(yytext().length());
          }
        case 27: break;
        case 8: 
          { return StoryTokenType.META_TEXT;
          }
        case 28: break;
        case 12: 
          { return StoryTokenType.TABLE_DELIM;
          }
        case 29: break;
        case 6: 
          { return StoryTokenType.SCENARIO_TEXT;
          }
        case 30: break;
        case 17: 
          { yystatePopNPush(2, IN_EXAMPLES); return StoryTokenType.EXAMPLE_TYPE;
          }
        case 31: break;
        case 1: 
          { return StoryTokenType.STORY_DESCRIPTION;
          }
        case 32: break;
        case 3: 
          { return StoryTokenType.BAD_CHARACTER;
          }
        case 33: break;
        case 16: 
          { yystatePopNPush(2, IN_META);     return StoryTokenType.META;
          }
        case 34: break;
        case 18: 
          { yystatePopNPush(2, IN_SCENARIO); return StoryTokenType.SCENARIO_TYPE;
          }
        case 35: break;
        case 4: 
          { return StoryTokenType.WHITE_SPACE;
          }
        case 36: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
